<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="KCFINALMAC" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field1ae3002a">
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field4ae947d6">
	</Field>
	<Field name="RR" type="required" numBits="16" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field14c02432">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" id="module.Register17f02364" />
	<Register name="AR" width="12" id="module.Register5049af0c" />
	<Register name="DR" width="16" id="module.Register4aae60b1" />
	<Register name="E" width="16" id="module.Register7ba8a268" />
	<Register name="FGI" width="1" id="module.Register6d55457a" />
	<Register name="FGO" width="1" id="module.Register70f9b613" />
	<Register name="I" width="1" id="module.Register496beb55" />
	<Register name="IEN" width="1" id="module.Register77eeabf2" />
	<Register name="INPR" width="16" id="module.Register30575ee0" />
	<Register name="IR" width="16" id="module.Registerd233fd7" />
	<Register name="OUTR" width="16" id="module.Register1b844c65" />
	<Register name="PC" width="12" id="module.Register19b7d5dc" />
	<Register name="S" width="1" id="module.Register139d2854" />
	<Register name="T" width="1" id="module.Register7546077" />
	<Register name="TR" width="16" id="module.Register3e0af39c" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY-OUT" bit="0" register="module.Register7ba8a268" halt="false" id="module.ConditionBit19b4d8b4" />
	<ConditionBit name="HALT BIT" bit="0" register="module.Register139d2854" halt="true" id="module.ConditionBit63119c5e" />

	<!--............. rams ..........................-->
	<RAM name="KC" length="4096" cellSize="16" id="module.RAM47620f93" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="module.Register17f02364" start="0" numBits="16" value="0" id="microinstruction.CpusimSet2986952a" />
	<Set name="E&lt;-0" register="module.Register7ba8a268" start="0" numBits="1" value="0" id="microinstruction.CpusimSet6bce88f8" />
	<Set name="FGI&lt;-0" register="module.Register6d55457a" start="0" numBits="1" value="0" id="microinstruction.CpusimSet6667d798" />
	<Set name="FGO&lt;-0" register="module.Register70f9b613" start="0" numBits="1" value="0" id="microinstruction.CpusimSet60b1b088" />
	<Set name="IEN&lt;-0" register="module.Register77eeabf2" start="0" numBits="1" value="0" id="microinstruction.CpusimSet7d834671" />
	<Set name="IEN&lt;-1" register="module.Register77eeabf2" start="0" numBits="1" value="1" id="microinstruction.CpusimSet62159871" />

	<!--............. test ..........................-->
	<Test name="if(AC!=0) Skip-1" register="module.Register17f02364" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test3a9648bc" />
	<Test name="if(AC[15]!=0) Skip-1" register="module.Register17f02364" start="15" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test57ce9a96" />
	<Test name="if(AC[15]!=1) Skip-1" register="module.Register17f02364" start="15" numBits="1" comparison="NE" value="1" omission="1" id="microinstruction.Test3099fed0" />
	<Test name="if(DR!=0) Skip-1" register="module.Register4aae60b1" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test7e013ea2" />
	<Test name="if(E!=0) Skip-1" register="module.Register7ba8a268" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test76da4a76" />
	<Test name="if(FGI!=1) Skip-1" register="module.Register6d55457a" start="0" numBits="1" comparison="NE" value="1" omission="1" id="microinstruction.Test55637411" />
	<Test name="if(FGO!=0) Skip-1" register="module.Register70f9b613" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test2af37f13" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;-AC+1" register="module.Register17f02364" delta="1" id="microinstruction.Increment5d70a0c1" />
	<Increment name="AR&lt;-AR+1" register="module.Register5049af0c" delta="1" id="microinstruction.Increment795dd8e3" />
	<Increment name="DR&lt;-DR+1" register="module.Register4aae60b1" delta="1" id="microinstruction.Increment3750f825" />
	<Increment name="PC&lt;-PC+1" register="module.Register19b7d5dc" delta="1" id="microinstruction.Increment6ea123b" />

	<!--............. shift .........................-->
	<Shift name="shl AC" type="logical" source="module.Register17f02364" destination="module.Register17f02364" direction="left" distance="1" id="microinstruction.Shift2f456b64" />
	<Shift name="shr AC" type="logical" source="module.Register17f02364" destination="module.Register17f02364" direction="right" distance="1" id="microinstruction.Shift579d6aa7" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="module.Register17f02364" source2="module.Register17f02364" destination="module.Register17f02364" id="microinstruction.Logical552eeaae" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="module.Register17f02364" source2="module.Register4aae60b1" destination="module.Register17f02364" id="microinstruction.Logical54e92111" />
	<Logical name="E&lt;-E'" type="NOT" source1="module.Register7ba8a268" source2="module.Register7ba8a268" destination="module.Register7ba8a268" id="microinstruction.Logical386ac9e6" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="module.Register17f02364" source2="module.Register4aae60b1" destination="module.Register17f02364" id="microinstruction.Arithmetic2611276" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0)&lt;-T" source="module.Register7546077" srcStartBit="0" dest="module.Register17f02364" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR2038f30e" />
	<TransferRtoR name="AC(15)&lt;-E" source="module.Register7ba8a268" srcStartBit="0" dest="module.Register17f02364" destStartBit="15" numBits="1" id="microinstruction.TransferRtoR3d44bfb1" />
	<TransferRtoR name="AC&lt;-DR" source="module.Register4aae60b1" srcStartBit="0" dest="module.Register17f02364" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR530f7406" />
	<TransferRtoR name="AR&lt;-IR(0-11)" source="module.Registerd233fd7" srcStartBit="0" dest="module.Register5049af0c" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR59f73eb3" />
	<TransferRtoR name="AR&lt;-PC" source="module.Register19b7d5dc" srcStartBit="0" dest="module.Register5049af0c" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR3eb00600" />
	<TransferRtoR name="AR&lt;-TR(4-15)" source="module.Register3e0af39c" srcStartBit="4" dest="module.Register5049af0c" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR26918f50" />
	<TransferRtoR name="E&lt;-AC(15)" source="module.Register17f02364" srcStartBit="15" dest="module.Register7ba8a268" destStartBit="0" numBits="1" id="microinstruction.TransferRtoRe9670c0" />
	<TransferRtoR name="E&lt;-T" source="module.Register7546077" srcStartBit="0" dest="module.Register7ba8a268" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR6ef4d507" />
	<TransferRtoR name="I&lt;-IR(3)" source="module.Registerd233fd7" srcStartBit="3" dest="module.Register496beb55" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR50ca5edf" />
	<TransferRtoR name="PC&lt;-AR" source="module.Register5049af0c" srcStartBit="0" dest="module.Register19b7d5dc" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR7a0ba099" />
	<TransferRtoR name="T&lt;-AC(0)" source="module.Register17f02364" srcStartBit="0" dest="module.Register7546077" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR47a6df68" />
	<TransferRtoR name="T&lt;-E" source="module.Register7ba8a268" srcStartBit="0" dest="module.Register7546077" destStartBit="0" numBits="1" id="microinstruction.TransferRtoRf326676" />
	<TransferRtoR name="TR&lt;-PC" source="module.Register19b7d5dc" srcStartBit="0" dest="module.Register3e0af39c" destStartBit="4" numBits="12" id="microinstruction.TransferRtoRd8cede9" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR(0-3)" ir="module.Registerd233fd7" id="microinstruction.Decode2a248ba9" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HLT" bit="module.ConditionBit63119c5e" value="1" id="microinstruction.SetCondBit5b085c1a" />

	<!--............. io ............................-->
	<IO name="AC(0-7)&lt;-INPR" direction="input" type="integer" buffer="module.Register17f02364" connection="[console]" id="microinstruction.IO471590db" />
	<IO name="OUTR&lt;-AC(0-7)" direction="output" type="integer" buffer="module.Register17f02364" connection="[console]" id="microinstruction.IO2d9cce75" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="module.RAM47620f93" data="module.Register4aae60b1" address="module.Register5049af0c" id="microinstruction.MemoryAccess236b61ac" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="module.RAM47620f93" data="module.Registerd233fd7" address="module.Register5049af0c" id="microinstruction.MemoryAccess3a1a0157" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="module.RAM47620f93" data="module.Register17f02364" address="module.Register5049af0c" id="microinstruction.MemoryAccess51e2cd87" />
	<MemoryAccess name="M[AR]&lt;-DR" direction="write" memory="module.RAM47620f93" data="module.Register4aae60b1" address="module.Register5049af0c" id="microinstruction.MemoryAccess1a465ea8" />
	<MemoryAccess name="M[AR]&lt;-TR" direction="write" memory="module.RAM47620f93" data="module.Register3e0af39c" address="module.Register5049af0c" id="microinstruction.MemoryAccess62582a4d" />
	<MemoryAccess name="TR&lt;-M[AR]" direction="read" memory="module.RAM47620f93" data="module.Register3e0af39c" address="module.Register5049af0c" id="microinstruction.MemoryAccess8229fe8" />

	<!--............. end ...........................-->
	<End id="microinstruction.End4f6bf59e" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR3eb00600" />
		<Microinstruction microRef="microinstruction.MemoryAccess3a1a0157" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.TransferRtoR59f73eb3" />
		<Microinstruction microRef="microinstruction.Decode2a248ba9" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="ISZ_I" opcode="e" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Increment3750f825" />
		<Microinstruction microRef="microinstruction.MemoryAccess1a465ea8" />
		<Microinstruction microRef="microinstruction.Test7e013ea2" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="BSA_I" opcode="d" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.TransferRtoRd8cede9" />
		<Microinstruction microRef="microinstruction.MemoryAccess62582a4d" />
		<Microinstruction microRef="microinstruction.Increment795dd8e3" />
		<Microinstruction microRef="microinstruction.TransferRtoR7a0ba099" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="BUN_I" opcode="c" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.TransferRtoR7a0ba099" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="STA_I" opcode="b" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.MemoryAccess51e2cd87" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="LDA_I" opcode="a" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.TransferRtoR530f7406" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="ADD_I" opcode="9" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Arithmetic2611276" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="AND_I" opcode="8" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR50ca5edf" />
		<Microinstruction microRef="microinstruction.MemoryAccess8229fe8" />
		<Microinstruction microRef="microinstruction.TransferRtoR26918f50" />
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Logical54e92111" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="6" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Increment3750f825" />
		<Microinstruction microRef="microinstruction.MemoryAccess1a465ea8" />
		<Microinstruction microRef="microinstruction.Test7e013ea2" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="5" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoRd8cede9" />
		<Microinstruction microRef="microinstruction.MemoryAccess62582a4d" />
		<Microinstruction microRef="microinstruction.Increment795dd8e3" />
		<Microinstruction microRef="microinstruction.TransferRtoR7a0ba099" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.TransferRtoR7a0ba099" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.MemoryAccess51e2cd87" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.TransferRtoR530f7406" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Arithmetic2611276" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" format="OP ADDR" >
		<Microinstruction microRef="microinstruction.MemoryAccess236b61ac" />
		<Microinstruction microRef="microinstruction.Logical54e92111" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" format="RR" >
		<Microinstruction microRef="microinstruction.IO2d9cce75" />
		<Microinstruction microRef="microinstruction.CpusimSet60b1b088" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" format="RR" >
		<Microinstruction microRef="microinstruction.IO471590db" />
		<Microinstruction microRef="microinstruction.CpusimSet6667d798" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" format="RR" >
		<Microinstruction microRef="microinstruction.SetCondBit5b085c1a" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="7002" format="RR" >
		<Microinstruction microRef="microinstruction.Test76da4a76" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="7004" format="RR" >
		<Microinstruction microRef="microinstruction.Test3a9648bc" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="7008" format="RR" >
		<Microinstruction microRef="microinstruction.Test3099fed0" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7010" format="RR" >
		<Microinstruction microRef="microinstruction.Test57ce9a96" />
		<Microinstruction microRef="microinstruction.Increment6ea123b" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="7020" format="RR" >
		<Microinstruction microRef="microinstruction.Increment5d70a0c1" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" format="RR" >
		<Microinstruction microRef="microinstruction.TransferRtoR47a6df68" />
		<Microinstruction microRef="microinstruction.Shift2f456b64" />
		<Microinstruction microRef="microinstruction.TransferRtoR3d44bfb1" />
		<Microinstruction microRef="microinstruction.TransferRtoR6ef4d507" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" format="RR" >
		<Microinstruction microRef="microinstruction.Logical386ac9e6" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" format="RR" >
		<Microinstruction microRef="microinstruction.Logical552eeaae" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="7400" format="RR" >
		<Microinstruction microRef="microinstruction.CpusimSet6bce88f8" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" format="RR" >
		<Microinstruction microRef="microinstruction.CpusimSet2986952a" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" format="RR" >
		<Microinstruction microRef="microinstruction.TransferRtoRf326676" />
		<Microinstruction microRef="microinstruction.TransferRtoRe9670c0" />
		<Microinstruction microRef="microinstruction.Shift579d6aa7" />
		<Microinstruction microRef="microinstruction.TransferRtoR2038f30e" />
		<Microinstruction microRef="microinstruction.End4f6bf59e" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAM47620f93" startingAddress="0" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
		<RAMWindowInfo ram="module.RAM47620f93" cellSize="1" contentsbase="Hexadecimal" addressbase="Decimal" 
			top="360" left="1398" width="450" height="450" />
		<RegisterWindowInfo base="Decimal" 
			top="15" left="1485" width="300" height="335" />
	</ModuleWindowsInfo>

</Machine>
